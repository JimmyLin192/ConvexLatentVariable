/*###############################################################
## MODULE: mat.cpp
## VERSION: 1.0 
## SINCE 2014-06-16
## AUTHOR Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
## DESCRIPTION: 
##    Matrix data structure and associated operations.
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

double ** mat_init (int nRows, int nCols) {

    double ** res = new double * [nRows];
    for (int i = 0; i < nRows; i ++) {
        res[i] = new double [nCols];
    }

    return res;
}

void mat_free (double ** src, int nRows, int nCols) {

    for (int i = 0; i < nRows; i ++) {
        delete src[i];
    }

}

void mat_add (double ** src1, double ** src2, double ** dest, int nRows, int nCols) {

    for (int i = 0; i < nRows; i ++) {
        for (int j = 0; j < nCols; j ++) {
            dest[i][j] = src1[i][j] + src2[i][j];
        }
    }

}

void mat_sub (double ** src1, double ** src2, double ** dest, int nRows, int nCols) {
    
    for (int i = 0; i < nRows; i ++) {
        for (int j = 0; j < nCols; j ++) {
            dest[i][j] = src1[i][j] - src2[i][j];
        }
    }

}

void mat_dot (double scalar, double ** src, double ** dest, int nRows, int nCols) {

    for (int i = 0; i < nRows; i ++) {
        for (int j = 0; j < nCols; j ++) {
            dest[i][j] = scalar * src[i][j];
        }
    }

}

void mat_print (double ** src, int nRows, int nCols) {
    string field_seperator = ",";
    string line_separator = "\n";
    for (int i = 0; i < nRows; i ++) {
        for (int j = 0; j < nCols; j ++) { 
            cout << src[i][j] << field_seperator;
        }
        cout << line_separator;
    }
}

// TODO: mat_write and mat_read
