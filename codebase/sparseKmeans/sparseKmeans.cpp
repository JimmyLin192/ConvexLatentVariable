/*###############################################################
## MODULE: sparseKmeans.cpp
## VERSION: 1.0 
## SINCE 2014-06-14
## AUTHOR:
##     Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
## DESCRIPTION: 
##      
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/


int main (int argc, char ** argv) {
    
    // exception control
    if (argc < 2) {
        cerr << "Usage: Kmeans [dataFile] [lambda]" << endl;
        cerr << "Note: dataFile must be scaled to [0,1] in advance." << endl;
        exit(-1);
    }

    // parse arguments
    char * dataFile = argv[1];
    double lambda = atof(argv[2]);

    // read in data
    vector<Instance*> data;

    // explore the data 
    int dimensions = -1;
    int N = data.size(); // data size
    for (int i = 0; i < N; i++) {
        vector< pair<int,double> > * f = &(data[i]->fea);
        int last_index = f->size() - 1;
        if (f->at(last_index).first > dimensions) {
            dimensions = f->at(last_index).first;
        }

    }

    int D = dimensions;
    cout << "D = " << D << endl;
    cout << "N = " << N << endl;
    cout << "lambda = " << lambda << endl;
    int seed = time(NULL);
    srand(seed);
    cout << "seed = " << seed << endl;

    // Run K-means 
    map<int, Cluster*> clusters;
    int * z = new int [data.size()];

}
